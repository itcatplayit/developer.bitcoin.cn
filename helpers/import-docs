#!/usr/bin/env ruby

require "liquid"
require "open3"
require "fileutils"
require "optparse"

require_relative "importer"
require_relative "custom_liquid_tags"

options = {}
OptionParser.new do |opts|
  opts.banner = "Usage: import-docs [options]"

  opts.on("--skip-sections", "Skip import of sections") do |v|
    options[:skip_sections] = v
  end

  opts.on("--file", "Process only one file") do |v|
    options[:file] = v
  end

  opts.on("--report-links", "Report all links present in processed docs") do |v|
    options[:report_links] = v
  end

  opts.on("--tmp-rst-path PATH", "Path were intermediate RST results are written before post processing") do |v|
    options[:tmp_rst_path] = v
  end

  opts.on("--show-references", "Show references and stop") do |v|
    options[:show_references] = v
  end
end.parse!

if ARGV.length != 1
  STDERR.puts "Usage: import-docs <bitcoin.org source git dir>"
  exit 1
end

importer = Importer.new(options[:tmp_rst_path])

importer.base_dir = ARGV[0]
importer.target_base_dir = File.expand_path("../../", __FILE__)

include_dir = File.join(importer.base_dir, "_includes")
Liquid::Template.file_system = Liquid::LocalFileSystem.new(include_dir)

sections = [
  {
    target_dir: "devguide",
    source_dir: "_data/devdocs/en/guides",
    pages: {
      "block_chain" => "Block Chain",
      "transactions" => "Transactions",
      "contracts" => "Contracts",
      "wallets" => "Wallets",
      "payment_processing" => "Payment Processing",
      "operating_modes" => "Operating Modes",
      "p2p_network" => "P2P Network",
      "mining" => "Mining",
    }
  },
  {
    target_dir: "reference",
    source_dir: "_data/devdocs/en/references",
    pages: {
      "intro" => "Introduction",
      "block_chain" => nil,
      "transactions" => nil,
      "wallets" => nil,
      "p2p_networking" => nil
    }
  },
  {
    target_dir: "examples",
    source_dir: "_data/devdocs/en/examples",
    pages: {
      "intro" => "Introduction",
      "testing" => nil,
      "transactions" => nil,
      "payment_processing" => nil,
      "p2p_networking" => nil,
    }
  }
]

Liquid::Template.error_mode = :warn

if options[:file]
  puts importer.render_template(ARGV[0])
else
  importer.read_references
  # Run glossary first because it adds the references for the glossary entries
  importer.import_glossary
  if options[:show_references]
    importer.show_references
    exit 0
  end
  importer.read_summaries
  if !options[:skip_sections]
    importer.import_sections(sections)
    importer.import_images
  end
  importer.write_terms_page
  importer.report_unrecognized_links
  if options[:report_links]
    importer.report_links
  end
end
